name: ci
on: [push, pull_request, workflow_dispatch]

permissions:
  contents: read
  packages: read

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---- Cache NuGet (para medir hit %) ----
      - name: Cache NuGet
        id: nuget_cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Snapshot NuGet packages (pre-restore)
        run: |
          mkdir -p .cache-metrics
          find ~/.nuget/packages -maxdepth 2 -mindepth 2 -type d 2>/dev/null \
            | sed 's#.*/packages/##' \
            | tr '[:upper:]' '[:lower:]' \
            | sort > .cache-metrics/pre.txt || true

      - name: Mostrar sources (debug)
        run: dotnet nuget list source

      - name: Restore
        run: |
          dotnet restore \
            --source "https://api.nuget.org/v3/index.json" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test (with coverage)
        run: dotnet test -c Release --no-build --collect:"XPlat Code Coverage" --verbosity normal

      # ---- Cobertura al Job Summary + HTML como artefacto ----
      - name: Generate coverage summary
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '**/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'MarkdownSummary;HtmlInline_AzurePipelines'

      - name: Add coverage to Job Summary
        run: |
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          cat coveragereport/Summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport

      # ---- Cache hit % estimado (NuGet) ----
      - name: Compute NuGet cache hit %
        run: |
          SOLUTION=$(ls *.sln | head -n 1)
          dotnet list "$SOLUTION" package --include-transitive --format json > .cache-metrics/list.json

          jq -r '
            [.projects[].frameworks[]
              | (.topLevelPackages + .transitivePackages // [])
              | .[] | "\(.id | ascii_downcase)/\(.resolvedVersion | ascii_downcase)"
            ] | unique | .[]' .cache-metrics/list.json > .cache-metrics/required.txt

          comm -12 .cache-metrics/pre.txt .cache-metrics/required.txt > .cache-metrics/hit.txt || true

          total=$(wc -l < .cache-metrics/required.txt | tr -d ' ')
          hits=$(wc -l < .cache-metrics/hit.txt | tr -d ' ')
          pct=0
          if [ "$total" -gt 0 ]; then
            pct=$(awk -v h="$hits" -v t="$total" 'BEGIN{printf("%.0f", (h*100.0)/t)}')
          fi

          {
            echo "## Cache NuGet"
            echo ""
            echo "- Acción cache: **${{ steps.nuget_cache.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}**"
            echo "- Paquetes requeridos: **$total**"
            echo "- Presentes desde caché (pre-restore): **$hits**"
            echo "- **Cache hit estimado:** $pct%"
          } >> $GITHUB_STEP_SUMMARY
